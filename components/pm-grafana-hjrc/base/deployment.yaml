apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: grafana
    app.kubernetes.io/created-by: application-service
    app.kubernetes.io/instance: pm-grafana-hjrc
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: pm-grafana-hjrc
    app.kubernetes.io/part-of: pm-grafana
  name: pm-grafana-hjrc
  namespace: grafana
spec:
  replicas: 1
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      app: grafana
      app.kubernetes.io/instance: pm-grafana-hjrc
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: grafana
        app.kubernetes.io/instance: pm-grafana-hjrc
    spec:
      containers:
      - env:
        - name: GF_SECURITY_ADMIN_USER
          value: admin
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: GRAFANA_PASSWORD
              name: grafana-secrets
        - name: GF_AWS_S3_BUCKET
          valueFrom:
            secretKeyRef:
              key: AWS_S3_BUCKET
              name: grafana-secrets
        - name: GF_AWS_S3_REGION
          valueFrom:
            secretKeyRef:
              key: AWS_S3_REGION
              name: grafana-secrets
        - name: GF_AWS_S3_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              key: AWS_ACCESS_KEY_ID
              name: grafana-secrets
        - name: GF_AWS_S3_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: AWS_SECRET_ACCESS_KEY
              name: grafana-secrets
        image: grafana/grafana:latest
        name: grafana
        ports:
        - containerPort: 3000
        resources:
          limits:
            cpu: "1"
            memory: 256Mi
          requests:
            cpu: 500m
            memory: 256Mi
        volumeMounts:
        - mountPath: /var/lib/grafana
          name: grafana-storage
      volumes:
      - emptyDir: {}
        name: grafana-storage
status: {}
